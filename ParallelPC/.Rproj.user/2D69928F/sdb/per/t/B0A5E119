{
    "contents" : "#library(multicore)\n\nlibrary(bnlearn)\nlibrary(pcalg)\n#library(WGCNA)\nlibrary(Rgraphviz)\n\n################################################################\n#linear regression test\nmyCItest1=function(x,y,S, suffStat){\n\n\tif(length(S)==0){\n\t\tx.=suffStat[,x]\n\t\ty.=suffStat[,y]\n\t}\n\telse{\n\t\trxy <- resid(lm.fit(y= suffStat[,c(x,y)], x= cbind(1, suffStat[,S])))\n\t\tx. <- rxy[,1]; y. <- rxy[,2]\n\t}\n\tcor.test(x., y.)$p.value\n\t\n}\n##############################################################\n#gaussCItest\n\nmyCItest2=function(x,y,S, suffStat){\n\t\n#x, y, and S are passed from the main algorithm. We need to specify the paramater to \n#satify the pre-defined tests\n\t\n\tgaussCItest(x,y,S,suffStat=list(C=cor(suffStat), n=nrow(suffStat)))\n\t\n}\n###############################################################\n#gaussCItest=bnlearn::zf\n\nzf=function(x,y,S, suffStat){\n\t\n#x, y, and S are passed from the main algorithm. We need to specify the paramater to \n#satify the pre-defined tests\n\t\n\tif(!is.data.frame(suffStat)) suffStat=data.frame(suffStat)#suffStatis the dataset\n\tNamex=colnames(suffStat)[x]\n\tNamey=colnames(suffStat)[y]\n\tNamez=colnames(suffStat)[S]\n\n\ttest=bnlearn::ci.test(x=Namex, y=Namey, z=Namez, data=suffStat, test=\"zf\")\n\tpval=test$p.value\n\tcat(\"x=\",x,\" y=\",y,\" S=\", S, \"pvalue=\", pval, \"\\n\")\n\tpval\n\t\n\t\n}\n\n###############################################################\nmczf=function(x,y,S, suffStat){\n\t\t\n\tif(!is.data.frame(suffStat)) suffStat=data.frame(suffStat)#suffStat is the dataset\n\tNamex=colnames(suffStat)[x]\n\tNamey=colnames(suffStat)[y]\n\tNamez=colnames(suffStat)[S]\n\t\n\ttest=bnlearn::ci.test(x=Namex, y=Namey, z=Namez, data=suffStat, test=\"mc-zf\")\n\tpval=test$p.value\n\tcat(\"x=\",x,\" y=\",y,\" S=\", S, \"pvalue=\", pval, \"\\n\")\n\tpval\n\t\n\t\n}\n##############################################################\nsmczf=function(x,y,S, suffStat){\n\t\t\n\tif(!is.data.frame(suffStat)) suffStat=data.frame(suffStat)#suffStat is the dataset\n\tNamex=colnames(suffStat)[x]\n\tNamey=colnames(suffStat)[y]\n\tNamez=colnames(suffStat)[S]\n\t\n\ttest=bnlearn::ci.test(x=Namex, y=Namey, z=Namez, data=suffStat, test=\"smc-zf\")\n\tpval=test$p.value\n\tcat(\"x=\",x,\" y=\",y,\" S=\", S, \"pvalue=\", pval, \"\\n\")\n\tpval\n\t\n\t\n}\n################################################################\n\n################################################################\n\n#mutual information: bnlearn::mi-g \n\nmig=function(x,y,S, suffStat){\n\t\n#x, y, and S are passed from the main algorithm. We need to specify the paramater to \n#satify the pre-defined tests\n\t\n\tif(!is.data.frame(suffStat)) suffStat=data.frame(suffStat)#suffStatis the dataset\n\tNamex=colnames(suffStat)[x]\n\tNamey=colnames(suffStat)[y]\n\tNamez=colnames(suffStat)[S]\n\t\n\ttest=bnlearn::ci.test(x=Namex, y=Namey, z=Namez, data=suffStat, test=\"mi-g\")\n\tpval=test$p.value\n\tcat(\"x=\",x,\" y=\",y,\" S=\", S, \"pvalue=\", pval, \"\\n\")\n\tpval\n\t\n\t\n}\n\n################################################################\n#mutual information Monte Carlo: bnlearn::mc-mi-g\nmcmig=function(x,y,S, suffStat){\n\t\t\n\tif(!is.data.frame(suffStat)) suffStat=data.frame(suffStat)#suffStat is the dataset\n\tNamex=colnames(suffStat)[x]\n\tNamey=colnames(suffStat)[y]\n\tNamez=colnames(suffStat)[S]\n\t\n\ttest=bnlearn::ci.test(x=Namex, y=Namey, z=Namez, data=suffStat, test=\"mc-mi-g\")\n\tpval=test$p.value\n\tcat(\"x=\",x,\" y=\",y,\" S=\", S, \"pvalue=\", pval, \"\\n\")\n\tpval\n\t\n\t\n}\n\n#mutual information Sequential Monte Carlo: bnlearn:: smc-mi-g\n################################################################\nsmcmig=function(x,y,S, suffStat){\n\t\t\n\tif(!is.data.frame(suffStat)) suffStat=data.frame(suffStat)#suffStat is the dataset\n\tNamex=colnames(suffStat)[x]\n\tNamey=colnames(suffStat)[y]\n\tNamez=colnames(suffStat)[S]\n\t\n\ttest=bnlearn::ci.test(x=Namex, y=Namey, z=Namez, data=suffStat, test=\"smc-mi-g\")\n\tpval=test$p.value\n\tcat(\"x=\",x,\" y=\",y,\" S=\", S, \"pvalue=\", pval, \"\\n\")\n\tpval\n\t\n\t\n}\n\n#Shrinkage estimator for mutual information\n################################################################\nmigsh=function(x,y,S, suffStat){\n\t\t\n\tif(!is.data.frame(suffStat)) suffStat=data.frame(suffStat)#suffStat is the dataset\n\tNamex=colnames(suffStat)[x]\n\tNamey=colnames(suffStat)[y]\n\tNamez=colnames(suffStat)[S]\n\t\n\ttest=bnlearn::ci.test(x=Namex, y=Namey, z=Namez, data=suffStat, test=\"mi-g-sh\")\n\tpval=test$p.value\n\tcat(\"x=\",x,\" y=\",y,\" S=\", S, \"pvalue=\", pval, \"\\n\")\n\tpval\n\t\n\t\n}\n#Pearson's chi-square\n################################################################\ncor=function(x,y,S, suffStat){\n\t\t\n\tif(!is.data.frame(suffStat)) suffStat=data.frame(suffStat)#suffStat is the dataset\n\tNamex=colnames(suffStat)[x]\n\tNamey=colnames(suffStat)[y]\n\tNamez=colnames(suffStat)[S]\n\t\n\ttest=bnlearn::ci.test(x=Namex, y=Namey, z=Namez, data=suffStat, test=\"cor\")\n\tpval=test$p.value\n\tcat(\"x=\",x,\" y=\",y,\" S=\", S, \"pvalue=\", pval, \"\\n\")\n\tpval\n\t\n\t\n}\n################################################################\n#Monte Carlo Pearson's chi-square\nmccor=function(x,y,S, suffStat){\n\t\t\n\tif(!is.data.frame(suffStat)) suffStat=data.frame(suffStat)#suffStat is the dataset\n\tNamex=colnames(suffStat)[x]\n\tNamey=colnames(suffStat)[y]\n\tNamez=colnames(suffStat)[S]\n\t\n\ttest=bnlearn::ci.test(x=Namex, y=Namey, z=Namez, data=suffStat, test=\"mc-cor\")\n\tpval=test$p.value\n\tcat(\"x=\",x,\" y=\",y,\" S=\", S, \"pvalue=\", pval, \"\\n\")\n\tpval\n\t\n\t\n}\n################################################################\n#Sequential Monte Carlo Pearson's chi-square\nsmccor=function(x,y,S, suffStat){\n\t\t\n\tif(!is.data.frame(suffStat)) suffStat=data.frame(suffStat)#suffStat is the dataset\n\tNamex=colnames(suffStat)[x]\n\tNamey=colnames(suffStat)[y]\n\tNamez=colnames(suffStat)[S]\n\t\n\ttest=bnlearn::ci.test(x=Namex, y=Namey, z=Namez, data=suffStat, test=\"smc-cor\")\n\tpval=test$p.value\n\tcat(\"x=\",x,\" y=\",y,\" S=\", S, \"pvalue=\", pval, \"\\n\")\n\tpval\n\t\n\t\n}\n################################################################\n\n#use pc with suffStat=data and indepTest=myCItest \n#data(gmG)\n#V = c(1:ncol(gmG$x))\n#V=as.character(V)\n#colnames(gmG$x)=V\n#pc.myfit <- pc(suffStat = gmG$x, indepTest = gaussCItest, p = 8, alpha = 0.01, skel.method=\"stable.fast\", verbose=TRUE)\n\n#plot(pc.myfit)\n\nexperiment=function(dataset, method, verbose){\n\tV=colnames(dataset)\n\tp=ncol(dataset)\n\t#pc.gaussCItest <- pc(suffStat = dataset, indepTest = myCItest2, p = p, alpha = 0.01, skel.method=method, verbose=verbose)\n\tpc.zf <- pc(suffStat = dataset, indepTest = zf, p = p, alpha = 0.01, skel.method=method, verbose=verbose)\n\tpc.mczf <- pc(suffStat = dataset, indepTest = mczf, p = p, alpha = 0.01, skel.method=method, verbose=verbose)\n\tpc.smczf <- pc(suffStat = dataset, indepTest = smczf, p = p, alpha = 0.01, skel.method=method, verbose=verbose)\n\tpc.mig <- pc(suffStat = dataset, indepTest = mig, p = p, alpha = 0.01, skel.method=method, verbose=verbose)\n\tpc.mcmig <- pc(suffStat = dataset, indepTest = mcmig, p = p, alpha = 0.01, skel.method=method, verbose=verbose)\n\tpc.smcmig <- pc(suffStat = dataset, indepTest = smcmig, p = p, alpha = 0.01, skel.method=method, verbose=verbose)\n\tpc.migsh <- pc(suffStat = dataset, indepTest = migsh, p = p, alpha = 0.01, skel.method=method, verbose=verbose)\n\tpc.cor <- pc(suffStat = dataset, indepTest = cor, p = p, alpha = 0.01, skel.method=method, verbose=verbose)\n\tpc.mccor <- pc(suffStat = dataset, indepTest = mccor, p = p, alpha = 0.01, skel.method=method, verbose=verbose)\n\tpc.smccor <- pc(suffStat = dataset, indepTest = smccor, p = p, alpha = 0.01, skel.method=method, verbose=verbose)\n\tresults=list(pc.zf, pc.mczf, pc.smczf, pc.mig, pc.mcmig, pc.smcmig, pc.migsh, pc.cor, pc.mccor, pc.smccor)\n\treturn(results)\n}\n #dag=randomDAG(50, 0.05, lB=0.1, uB=1)\n #data=rmvDAG(100, dag, errDist=\"normal\")\n #test=experiment(data, \"original\", FALSE)\n#for(i in 1:10){ print(compareGraphs(test[[i]]@graph, dag))}\n\n",
    "created" : 1438829998550.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1325993091",
    "id" : "B0A5E119",
    "lastKnownWriteTime" : 1403773876,
    "path" : "~/Dropbox/PROJECTS-WORKING/Parallel-PC-More/PCCI/Codes/PCCI.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}